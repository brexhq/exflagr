# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Flagr.Api.Flag do
  @moduledoc """
  API calls for all endpoints tagged `Flag`.
  """

  alias Flagr.Connection
  import Flagr.RequestBuilder


  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - body (CreateFlagRequest): create a flag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Flag{}} on success
  {:error, info} on failure
  """
  @spec create_flag(Tesla.Env.client, Flagr.Model.CreateFlagRequest.t, keyword()) :: {:ok, Flagr.Model.Flag.t} | {:error, Tesla.Env.t}
  def create_flag(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/flags")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Flag{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_flag(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_flag(connection, flag_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/flags/#{flag_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): the numbers of flags to return
    - :enabled (boolean()): return flags having given enabled status
    - :description (String.t): return flags exactly matching given description
    - :tags (String.t): return flags with the given tags (comma separated)
    - :description_like (String.t): return flags partially matching given description
    - :key (String.t): return flags matching given key
    - :offset (integer()): return flags given the offset, it should usually set together with limit
    - :preload (boolean()): return flags with preloaded segments and variants
    - :deleted (boolean()): return all deleted flags

  ## Returns

  {:ok, [%Flag{}, ...]} on success
  {:error, info} on failure
  """
  @spec find_flags(Tesla.Env.client, keyword()) :: {:ok, list(Flagr.Model.Flag.t)} | {:error, Tesla.Env.t}
  def find_flags(connection, opts \\ []) do
    optional_params = %{
      :"limit" => :query,
      :"enabled" => :query,
      :"description" => :query,
      :"tags" => :query,
      :"description_like" => :query,
      :"key" => :query,
      :"offset" => :query,
      :"preload" => :query,
      :"deleted" => :query
    }
    %{}
    |> method(:get)
    |> url("/flags")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%Flagr.Model.Flag{}])
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag to get
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Flag{}} on success
  {:error, info} on failure
  """
  @spec get_flag(Tesla.Env.client, integer(), keyword()) :: {:ok, Flagr.Model.Flag.t} | {:error, Tesla.Env.t}
  def get_flag(connection, flag_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/flags/#{flag_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Flag{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_flag_entity_types(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_flag_entity_types(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/flags/entity_types")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%{}])
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag to get
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%FlagSnapshot{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_flag_snapshots(Tesla.Env.client, integer(), keyword()) :: {:ok, list(Flagr.Model.FlagSnapshot.t)} | {:error, Tesla.Env.t}
  def get_flag_snapshots(connection, flag_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/flags/#{flag_id}/snapshots")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%Flagr.Model.FlagSnapshot{}])
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag to get
  - body (PutFlagRequest): update a flag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Flag{}} on success
  {:error, info} on failure
  """
  @spec put_flag(Tesla.Env.client, integer(), Flagr.Model.PutFlagRequest.t, keyword()) :: {:ok, Flagr.Model.Flag.t} | {:error, Tesla.Env.t}
  def put_flag(connection, flag_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/flags/#{flag_id}")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Flag{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag to get
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Flag{}} on success
  {:error, info} on failure
  """
  @spec restore_flag(Tesla.Env.client, integer(), keyword()) :: {:ok, Flagr.Model.Flag.t} | {:error, Tesla.Env.t}
  def restore_flag(connection, flag_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/flags/#{flag_id}/restore")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Flag{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag to get
  - body (SetFlagEnabledRequest): set flag enabled state
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Flag{}} on success
  {:error, info} on failure
  """
  @spec set_flag_enabled(Tesla.Env.client, integer(), Flagr.Model.SetFlagEnabledRequest.t, keyword()) :: {:ok, Flagr.Model.Flag.t} | {:error, Tesla.Env.t}
  def set_flag_enabled(connection, flag_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/flags/#{flag_id}/enabled")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Flag{})
  end
end
