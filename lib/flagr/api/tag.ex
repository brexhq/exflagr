# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Flagr.Api.Tag do
  @moduledoc """
  API calls for all endpoints tagged `Tag`.
  """

  alias Flagr.Connection
  import Flagr.RequestBuilder


  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - body (CreateTagRequest): create a tag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Tag{}} on success
  {:error, info} on failure
  """
  @spec create_tag(Tesla.Env.client, integer(), Flagr.Model.CreateTagRequest.t, keyword()) :: {:ok, Flagr.Model.Tag.t} | {:error, Tesla.Env.t}
  def create_tag(connection, flag_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/flags/#{flag_id}/tags")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Tag{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - tag_id (integer()): numeric ID of the tag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_tag(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_tag(connection, flag_id, tag_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/flags/#{flag_id}/tags/#{tag_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): the numbers of tags to return
    - :offset (integer()): return tags given the offset, it should usually set together with limit
    - :value_like (String.t): return tags partially matching given value

  ## Returns

  {:ok, [%Tag{}, ...]} on success
  {:error, info} on failure
  """
  @spec find_all_tags(Tesla.Env.client, keyword()) :: {:ok, list(Flagr.Model.Tag.t)} | {:error, Tesla.Env.t}
  def find_all_tags(connection, opts \\ []) do
    optional_params = %{
      :"limit" => :query,
      :"offset" => :query,
      :"value_like" => :query
    }
    %{}
    |> method(:get)
    |> url("/tags")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%Flagr.Model.Tag{}])
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%Tag{}, ...]} on success
  {:error, info} on failure
  """
  @spec find_tags(Tesla.Env.client, integer(), keyword()) :: {:ok, list(Flagr.Model.Tag.t)} | {:error, Tesla.Env.t}
  def find_tags(connection, flag_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/flags/#{flag_id}/tags")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%Flagr.Model.Tag{}])
  end
end
