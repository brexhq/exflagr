# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Flagr.Api.Export do
  @moduledoc """
  API calls for all endpoints tagged `Export`.
  """

  alias Flagr.Connection
  import Flagr.RequestBuilder


  @doc """
  Export JSON format of the eval cache dump

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec get_export_eval_cache_json(Tesla.Env.client, keyword()) :: {:ok, Flagr.Model.Object.t} | {:error, Tesla.Env.t}
  def get_export_eval_cache_json(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/export/eval_cache/json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Object{})
  end

  @doc """
  Export sqlite3 format of the db dump, which is converted from the main database.

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :exclude_snapshots (boolean()): export without snapshots data - useful for smaller db without snapshots 

  ## Returns

  {:ok, %Flagr.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_export_sqlite(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_export_sqlite(connection, opts \\ []) do
    optional_params = %{
      :"exclude_snapshots" => :query
    }
    %{}
    |> method(:get)
    |> url("/export/sqlite")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
