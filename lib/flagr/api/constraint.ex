# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Flagr.Api.Constraint do
  @moduledoc """
  API calls for all endpoints tagged `Constraint`.
  """

  alias Flagr.Connection
  import Flagr.RequestBuilder


  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - segment_id (integer()): numeric ID of the segment
  - body (CreateConstraintRequest): create a constraint
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Constraint{}} on success
  {:error, info} on failure
  """
  @spec create_constraint(Tesla.Env.client, integer(), integer(), Flagr.Model.CreateConstraintRequest.t, keyword()) :: {:ok, Flagr.Model.Constraint.t} | {:error, Tesla.Env.t}
  def create_constraint(connection, flag_id, segment_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/flags/#{flag_id}/segments/#{segment_id}/constraints")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Constraint{})
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - segment_id (integer()): numeric ID of the segment
  - constraint_id (integer()): numeric ID of the constraint
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_constraint(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_constraint(connection, flag_id, segment_id, constraint_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/flags/#{flag_id}/segments/#{segment_id}/constraints/#{constraint_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - segment_id (integer()): numeric ID of the segment
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%Constraint{}, ...]} on success
  {:error, info} on failure
  """
  @spec find_constraints(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, list(Flagr.Model.Constraint.t)} | {:error, Tesla.Env.t}
  def find_constraints(connection, flag_id, segment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/flags/#{flag_id}/segments/#{segment_id}/constraints")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%Flagr.Model.Constraint{}])
  end

  @doc """

  ## Parameters

  - connection (Flagr.Connection): Connection to server
  - flag_id (integer()): numeric ID of the flag
  - segment_id (integer()): numeric ID of the segment
  - constraint_id (integer()): numeric ID of the constraint
  - body (CreateConstraintRequest): create a constraint
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Flagr.Model.Constraint{}} on success
  {:error, info} on failure
  """
  @spec put_constraint(Tesla.Env.client, integer(), integer(), integer(), Flagr.Model.CreateConstraintRequest.t, keyword()) :: {:ok, Flagr.Model.Constraint.t} | {:error, Tesla.Env.t}
  def put_constraint(connection, flag_id, segment_id, constraint_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/flags/#{flag_id}/segments/#{segment_id}/constraints/#{constraint_id}")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Flagr.Model.Constraint{})
  end
end
